// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::chassisLeftController;
std::shared_ptr<SpeedController> RobotMap::chassisRightController;
std::shared_ptr<RobotDrive> RobotMap::chassisDrive;
std::shared_ptr<SpeedController> RobotMap::nerfGunShootMotor;
std::shared_ptr<SpeedController> RobotMap::nerfGunPlungerMotor;
std::shared_ptr<SpeedController> RobotMap::nabberArmArmMotor;
std::shared_ptr<Encoder> RobotMap::nabberArmArmEncoder;
std::shared_ptr<SpeedController> RobotMap::nabberNabberMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    chassisLeftController.reset(new Talon(0));
    lw->AddActuator("Chassis", "LeftController", std::static_pointer_cast<Talon>(chassisLeftController));
    
    chassisRightController.reset(new Talon(1));
    lw->AddActuator("Chassis", "RightController", std::static_pointer_cast<Talon>(chassisRightController));
    
    chassisDrive.reset(new RobotDrive(chassisLeftController, chassisRightController));
    
    chassisDrive->SetSafetyEnabled(true);
        chassisDrive->SetExpiration(0.1);
        chassisDrive->SetSensitivity(0.5);
        chassisDrive->SetMaxOutput(1.0);

    nerfGunShootMotor.reset(new Talon(2));
    lw->AddActuator("NerfGun", "ShootMotor", std::static_pointer_cast<Talon>(nerfGunShootMotor));
    
    nerfGunPlungerMotor.reset(new Talon(3));
    lw->AddActuator("NerfGun", "PlungerMotor", std::static_pointer_cast<Talon>(nerfGunPlungerMotor));
    
    nabberArmArmMotor.reset(new Talon(4));
    lw->AddActuator("NabberArm", "ArmMotor", std::static_pointer_cast<Talon>(nabberArmArmMotor));
    
    nabberArmArmEncoder.reset(new Encoder(0, 1, false, Encoder::k4X));
    lw->AddSensor("NabberArm", "ArmEncoder", nabberArmArmEncoder);
    nabberArmArmEncoder->SetDistancePerPulse(1.0);
    nabberArmArmEncoder->SetPIDSourceType(PIDSourceType::kDisplacement);
    nabberNabberMotor.reset(new Talon(5));
    lw->AddActuator("Nabber", "NabberMotor", std::static_pointer_cast<Talon>(nabberNabberMotor));
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
